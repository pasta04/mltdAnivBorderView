{"version":3,"sources":["App.tsx","serviceWorker.ts","SWUpdateDialog.tsx","index.tsx"],"names":["API_BASE","idolList","fetchJson","url","a","async","fetch","result","json","fetchEventList","eventType","eventId","rankList","idolId","join","console","log","map","rank","data","score","summaryTime","date","Date","format","replace","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","getMilliseconds","App","React","useState","list","setList","setIdolId","setEventId","setRankList","latestTime","setLatestTime","diffList","setDiffList","setEventType","eventTitle","setEventTitle","useEffect","idol","NaN","event","diff","window","location","search","temp","parsed","queryString","parse","match","Number","localStorage","setItem","toString","split","i","getItem","parseInt","length","fetchEventInfo","then","info","name","type","summary","useInterval","className","rankData","latestScore","getTime","agoList","agoData","agoHour","hourAgo","hourAgoData","filter","hourAgoDiff","push","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","waiting","onUpdate","onupdatefound","installingWorker","installing","onstatechange","state","controller","onSuccess","catch","error","SWUpdateDialog","show","setShow","style","width","background","onClick","postMessage","reload","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","scope","querySelector"],"mappings":"gRAKMA,G,MAAW,qCA0BXC,EAAW,CACf,2BACA,2BACA,2BACA,2BACA,iCACA,qBACA,2BACA,2BACA,2BACA,iCACA,2BACA,2BACA,2BACA,2BACA,2BACA,qBACA,2BACA,iCACA,iCACA,qBACA,iCACA,iCACA,2BACA,2BACA,eACA,iCACA,iCACA,iCACA,2BACA,qBACA,iCACA,2BACA,2BACA,qBACA,iCACA,2BACA,2BACA,iCACA,iCACA,qBACA,2BACA,2BACA,iCACA,2BACA,2BACA,2BACA,qBACA,2BACA,2BACA,2BACA,qBACA,4BAIF,SAAeC,EAAaC,GAA5B,iBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,MAAMH,IAD7B,cACQI,EADR,kBAAAH,EAAA,MAEqBG,EAAOC,QAF5B,cAEQA,EAFR,yBAGSA,GAHT,qCAMA,IAWMC,EAAiB,SAAOC,EAAmBC,EAAiBC,EAAoBC,GAA/D,iBAAAT,EAAAC,OAAA,uDAGnBF,EADgB,IAAdO,EACC,UAAMV,EAAN,kBAAwBW,EAAxB,oCAA2DE,EAA3D,YAAqED,EAASE,KAAK,KAAnF,sBAEA,UAAMd,EAAN,kBAAwBW,EAAxB,qCAA4DC,EAASE,KAAK,KAA1E,sBAELC,QAAQC,IAAIb,GAPS,WAAAC,EAAA,MAQFF,EAA4CC,IAR1C,cASrBI,GADIA,EARiB,QASLU,KAAI,SAAAC,GAClB,MAAO,CACLA,KAAMA,EAAKA,KACXC,KAAMD,EAAKC,KAAKF,KAAI,SAAAE,GAClB,MAAO,CACLC,MAAOD,EAAKC,MACZC,aA1BUC,EA0Bc,IAAIC,KAAKJ,EAAKE,aA1BhBG,EA0B8B,mBAnB5DA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAASA,EAAOC,QAAQ,QAAf,UAA2BH,EAAKI,iBACzBD,QAAQ,OAAQ,KAAOH,EAAKK,WAAa,IAAIC,OAAO,KACpDH,QAAQ,OAAQ,IAAMH,EAAKO,WAAWD,OAAO,KAC7CH,QAAQ,OAAQ,IAAMH,EAAKQ,YAAYF,OAAO,KAC9CH,QAAQ,OAAQ,IAAMH,EAAKS,cAAcH,OAAO,KAChDH,QAAQ,OAAQ,IAAMH,EAAKU,cAAcJ,OAAO,KAChDH,QAAQ,QAAS,KAAOH,EAAKW,mBAAmBL,OAAO,MAPtD,IAACN,EAAYE,SAWT,kBAoBdjB,GApBc,sCAuNR2B,EA1LQ,WAAO,IAAD,EACHC,IAAMC,SAA2C,IAD9C,mBACpBC,EADoB,KACdC,EADc,OAECH,IAAMC,SAAiB,GAFxB,mBAEpBvB,EAFoB,KAEZ0B,EAFY,OAGGJ,IAAMC,SAAiB,GAH1B,mBAGpBzB,EAHoB,KAGX6B,EAHW,OAIKL,IAAMC,SAAmB,IAJ9B,mBAIpBxB,EAJoB,KAIV6B,EAJU,OAKSN,IAAMC,SAAiB,IALhC,mBAKpBM,EALoB,KAKRC,EALQ,OAMKR,IAAMC,SAAmB,IAN9B,mBAMpBQ,EANoB,KAMVC,EANU,OAOOV,IAAMC,SAAiB,GAP9B,mBAOpB1B,EAPoB,KAOToC,EAPS,OAQSX,IAAMC,SAAiB,IARhC,mBAQpBW,EARoB,KAQRC,EARQ,KA2H3B,OAjHAb,IAAMc,WAAU,WAEd,IAAIC,EAAOC,IACPC,EAAQD,IACRjC,EAAiB,GACjBmC,EAAiB,GACrB,GAAIC,OAAOC,SAASC,OAAQ,CAC1B,IASIC,EATEC,EAASC,IAAYC,MAAMN,OAAOC,SAASC,QAU7CE,EAAOR,MAAQQ,EAAOR,KAAKW,MAAM,WACnCX,EAAOY,OAAOJ,EAAOR,MAErBa,aAAaC,QAAQ,OAAQd,EAAKe,aAGhCP,EAAON,OAASM,EAAON,MAAMS,MAAM,WACrCT,EAAQU,OAAOJ,EAAON,OACtBW,aAAaC,QAAQ,QAASZ,EAAMa,aAGlCP,EAAOxC,MAAQwC,EAAOxC,KAAK2C,MAAM,eACnCJ,EAAOC,EAAOxC,KAAKgD,MAAM,KACzBhD,EAAOuC,EAAKxC,KAAI,SAACkD,GAAD,OAAeL,OAAOK,MAEtCJ,aAAaC,QAAQ,OAAQN,EAAOxC,KAAK+C,aAGvCP,EAAOL,MAAQK,EAAOL,KAAKQ,MAAM,eAEnCR,GADAI,EAAOC,EAAOL,KAAKa,MAAM,MACbjD,KAAI,SAACkD,GAAD,OAAeL,OAAOK,MAEtCJ,aAAaC,QAAQ,OAAQN,EAAOL,KAAKY,aAK7C,IAAKf,EAAM,CACT,IAAM3C,EAASwD,aAAaK,QAAQ,QAElClB,EADE3C,EACK8D,SAAS9D,GAET,GAGX,IAAK6C,EAAO,CACV,IAAM7C,EAASwD,aAAaK,QAAQ,SAElChB,EADE7C,EACM8D,SAAS9D,GAET,IAGZ,GAAoB,IAAhBW,EAAKoD,OAAc,CACrB,IAAM/D,EAASwD,aAAaK,QAAQ,QACpC,GAAI7D,EAAQ,CACV,IAAMkD,EAAOlD,EAAO2D,MAAM,KAC1BhD,EAAOuC,EAAKxC,KAAI,SAACkD,GAAD,OAAeL,OAAOK,WAEtCjD,EAAO,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KAGhC,GAAoB,IAAhBmC,EAAKiB,OAAc,CACrB,IAAM/D,EAASwD,aAAaK,QAAQ,QACpC,GAAI7D,EAEF8C,EADa9C,EAAO2D,MAAM,KACdjD,KAAI,SAACkD,GAAD,OAAeL,OAAOK,WAEtCd,EAAO,CAAC,EAAG,EAAG,IAIlBd,EAAUW,GACVV,EAAWY,GACXX,EAAYvB,GACZ2B,EAAYQ,GAlGO,SAAO1C,GAAP,iBAAAP,EAAAC,OAAA,uDACfF,EADe,UACNH,EADM,kBACYW,EADZ,iCAAAP,EAAA,MAEAF,EAA4BC,IAF5B,cAEfI,EAFe,yBAGdA,GAHc,qCAqGnBgE,CAAenB,GAAOoB,MAAK,SAAAC,GACzBzB,EAAcyB,EAAKC,MACnB5B,EAAa2B,EAAKE,MAGHlE,EAAegE,EAAKE,KAAMvB,EAAOlC,EAAMgC,GAC/CsB,MAAK,SAAArD,GACV,GAAIA,EAAKmD,OAAS,EAAG,CACnBhC,EAAQnB,GACR,IAAMyD,EAAUzD,EAAKA,EAAKmD,OAAS,GAAGnD,KAAKA,EAAKA,EAAKmD,OAAS,GAAGnD,KAAKmD,OAAS,GAAGjD,YAClFsB,EAAciC,YAInB,IAGHC,aAAY,WACV9D,QAAQC,IAAI,IAAIO,MACDd,EAAeC,EAAWC,EAASC,EAAUC,GACrD2D,MAAK,SAAArD,GACVmB,EAAQnB,GACR,IAAMyD,EAAUzD,EAAKA,EAAKmD,OAAS,GAAGnD,KAAKA,EAAKA,EAAKmD,OAAS,GAAGnD,KAAKmD,OAAS,GAAGjD,YAClFsB,EAAciC,QAGf,KAGD,yBAAKE,UAAU,OACb,yBAAKA,UAAW,qBAEhB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,aAAa/B,GAC5B,yBAAK+B,UAAU,aACb,yBAAKA,UAAU,YAA0B,IAAdpE,GAAmBT,EAASY,EAAS,IAChE,yBAAKiE,UAAU,cAAf,WAAqCpC,KAKzC,yBAAKoC,UAAU,QAEb,yBAAKA,UAAU,cAEf,yBAAKA,UAAU,gBAEf,yBAAKA,UAAU,cACZlC,EAAS3B,KAAI,SAAAoC,GAAI,OAChB,yBAAKyB,UAAU,mBAAmBzB,EAAlC,UAKLhB,EAAKpB,KAAI,SAAA8D,GAER,IAAMC,EAAcD,EAAS5D,KAAK4D,EAAS5D,KAAKmD,OAAS,GAAGlD,MACtDsB,EAAa,IAAInB,KAAKwD,EAAS5D,KAAK4D,EAAS5D,KAAKmD,OAAS,GAAGjD,aAAa4D,UAG3EC,EAAUtC,EACVuC,EAAU,GAPI,uBAQpB,IARoB,IAQpB,EARoB,iBAQTC,EARS,QAUZC,EAAU3C,EAAa,KAAiB0C,EACxCE,EAAcP,EAAS5D,KAAKoE,QAAO,SAAApE,GACvC,OAAO,IAAII,KAAKJ,EAAKE,aAAa4D,YAAcI,KAE5CG,EAAcF,EAAYhB,OAAS,EAArB,WAA6BU,EAAcM,EAAY,GAAGlE,MAA1D,QAAwE,IAC5F+D,EAAQM,KAAKD,IAPf,EAAsBN,EAAtB,+CAAgC,IARZ,kFAkBpB,OACE,yBAAKJ,UAAU,QAEb,yBAAKA,UAAU,aAAaC,EAAS7D,KAArC,WAEA,yBAAK4D,UAAU,eAAeE,EAA9B,QAEA,yBAAKF,UAAU,cACZK,EAAQlE,KAAI,SAAAE,GAAI,OACf,yBAAK2D,UAAU,mBAAf,UAAqC3D,cCzS/CuE,EAAcC,QACW,cAA7BrC,OAAOC,SAASqC,UAEe,UAA7BtC,OAAOC,SAASqC,UAEhBtC,OAAOC,SAASqC,SAAS/B,MAAM,2DAuCnC,SAASgC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTtB,MAAK,SAAA2B,GAEAA,EAAaC,SAAWL,GAAUA,EAAOM,UAC3CN,EAAOM,SAASF,GAGlBA,EAAaG,cAAgB,WAC3B,IAAMC,EAAmBJ,EAAaK,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfV,UAAUC,cAAcU,YAI1B5F,QAAQC,IAAI,iHAGR+E,GAAUA,EAAOM,UACnBN,EAAOM,SAASF,KAMlBpF,QAAQC,IAAI,sCAGR+E,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACL/F,QAAQ+F,MAAM,4CAA6CA,MChG1D,IAAMC,EAAwE,SAAC,GAAsB,IAApBZ,EAAmB,EAAnBA,aAAmB,EACjF/D,qBAAW+D,EAAaC,SADyD,mBAClGY,EADkG,KAC5FC,EAD4F,KAYzG,OAAOD,EACL,yBAAKE,MAX4B,CACjCC,MAAO,OACPC,WAAY,gFAUV,wFACA,4BAAQC,QATS,WAAO,IAAD,EACzB,UAAAlB,EAAaC,eAAb,SAAsBkB,YAAY,CAAE3C,KAAM,iBAC1CsC,GAAQ,GACR3D,OAAOC,SAASgE,WAMd,yCAGF,sCCbJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFkB1C,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAA6BC,IAA6BvE,OAAOC,SAASuE,MAClFC,SAAWzE,OAAOC,SAASwE,OAIvC,OAGFzE,OAAO0E,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,sBAEPJ,IA+DV,SAAiCI,EAAeC,GAE9CzF,MAAMwF,EAAO,CACXmC,QAAS,CAAE,iBAAkB,YAE5BzD,MAAK,SAAA0D,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBACjB,MAApBF,EAASG,QAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAEzEtC,UAAUC,cAAcsC,MAAM/D,MAAK,SAAA2B,GACjCA,EAAaqC,aAAahE,MAAK,WAC7BlB,OAAOC,SAASgE,eAKpB1B,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL9F,QAAQC,IAAI,oEAlFVyH,CAAwB3C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAM/D,MAAK,WACjCzD,QAAQC,IAAI,iHAId6E,EAAgBC,EAAOC,OEzC/BE,CAAuB,CACrBW,UAAW,SAAAT,GACTpF,QAAQC,IAAR,6DAAkEmF,EAAauC,SAEjFrC,SAAU,SAAAF,GACJA,EAAaC,SACfoB,IAASC,OAAO,kBAAC,EAAD,CAAgBtB,aAAcA,IAAkBuB,SAASiB,cAAc,0B","file":"static/js/main.d96b525b.chunk.js","sourcesContent":["import React from 'react';\nimport queryString from 'query-string';\nimport useInterval from 'use-interval';\nimport './App.css';\n\nconst API_BASE = 'https://api.matsurihi.me/mltd/v1/';\n\ntype MatsuriEventRankingIdolPointList = MatsuriEventRankingIdolPoint[];\n\ntype MatsuriEventRankingIdolPoint = {\n  rank: number;\n  data: {\n    score: number;\n    summaryTime: string;\n  }[];\n};\n\ntype MatsuriEventInfo = {\n  id: number;\n  name: string;\n  type: number;\n  schedule: {\n    beginDate: string;\n    endDate: string;\n    pageBeginDate: string;\n    pageEndDate: string;\n    boostBeginDate: string;\n    boostEndDate: string;\n  };\n};\n\nconst idolList = [\n  '天海春香',\n  '如月千早',\n  '星井美希',\n  '萩原雪歩',\n  '高槻やよい',\n  '菊地真',\n  '水瀬伊織',\n  '四条貴音',\n  '秋月律子',\n  '三浦あずさ',\n  '双海亜美',\n  '双海真美',\n  '我那覇響',\n  '春日未来',\n  '最上静香',\n  '伊吹翼',\n  '田中琴葉',\n  '島原エレナ',\n  '佐竹美奈子',\n  '所恵美',\n  '徳川まつり',\n  '箱崎星梨花',\n  '野々原茜',\n  '望月杏奈',\n  'ロコ',\n  '七尾百合子',\n  '高山紗代子',\n  '松田亜利沙',\n  '高坂海美',\n  '中谷育',\n  '天空橋朋花',\n  'エミリー',\n  '北沢志保',\n  '舞浜歩',\n  '木下ひなた',\n  '矢吹可奈',\n  '横山奈緒',\n  '二階堂千鶴',\n  '馬場このみ',\n  '大神環',\n  '豊川風花',\n  '宮尾美也',\n  '福田のり子',\n  '真壁瑞希',\n  '篠宮可憐',\n  '百瀬莉緒',\n  '永吉昴',\n  '北上麗花',\n  '周防桃子',\n  'ジュリア',\n  '白石紬',\n  '桜守歌織',\n];\n// 詩花は201, 玲音は202\n\nasync function fetchJson<T>(url: string): Promise<T> {\n  const result = await fetch(url);\n  const json = await result.json();\n  return json as T;\n}\n\nconst formatDate = (date: Date, format: string): string => {\n  format = format.replace(/yyyy/g, `${date.getFullYear()}`);\n  format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));\n  format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));\n  format = format.replace(/HH/g, ('0' + date.getHours()).slice(-2));\n  format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));\n  format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));\n  format = format.replace(/SSS/g, ('00' + date.getMilliseconds()).slice(-3));\n  return format;\n};\n\nconst fetchEventList = async (eventType: number, eventId: number, rankList: number[], idolId?: number): Promise<MatsuriEventRankingIdolPointList> => {\n  let url: string;\n  if (eventType === 5) {\n    url = `${API_BASE}events/${eventId}/rankings/logs/idolPoint/${idolId}/${rankList.join(',')}?prettyPrint=false`;\n  } else {\n    url = `${API_BASE}events/${eventId}/rankings/logs/eventPoint/${rankList.join(',')}?prettyPrint=false`;\n  }\n  console.log(url);\n  let result = await fetchJson<MatsuriEventRankingIdolPointList>(url);\n  result = result.map(rank => {\n    return {\n      rank: rank.rank,\n      data: rank.data.map(data => {\n        return {\n          score: data.score,\n          summaryTime: formatDate(new Date(data.summaryTime), 'yyyy/MM/dd HH:mm'),\n        };\n      }),\n    };\n  });\n  return result;\n};\n\nconst fetchEventInfo = async (eventId: number): Promise<MatsuriEventInfo> => {\n  const url = `${API_BASE}events/${eventId}?prettyPrint=false`;\n  const result = await fetchJson<MatsuriEventInfo>(url);\n  return result;\n};\n\nconst App: React.SFC = () => {\n  const [list, setList] = React.useState<MatsuriEventRankingIdolPointList>([]);\n  const [idolId, setIdolId] = React.useState<number>(0);\n  const [eventId, setEventId] = React.useState<number>(0);\n  const [rankList, setRankList] = React.useState<number[]>([]);\n  const [latestTime, setLatestTime] = React.useState<string>('');\n  const [diffList, setDiffList] = React.useState<number[]>([]);\n  const [eventType, setEventType] = React.useState<number>(0);\n  const [eventTitle, setEventTitle] = React.useState<string>('');\n\n  React.useEffect(() => {\n    // クエリ情報を取得\n    let idol = NaN;\n    let event = NaN;\n    let rank: number[] = [];\n    let diff: number[] = [];\n    if (window.location.search) {\n      const parsed = queryString.parse(window.location.search) as {\n        idol: string;\n        event: string;\n        rank: string;\n        diff: string;\n        idolRank: string;\n      };\n      // アイドルID\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let temp: any;\n      if (parsed.idol && parsed.idol.match(/^\\d+$/)) {\n        idol = Number(parsed.idol);\n\n        localStorage.setItem('idol', idol.toString());\n      }\n      // イベントID\n      if (parsed.event && parsed.event.match(/^\\d+$/)) {\n        event = Number(parsed.event);\n        localStorage.setItem('event', event.toString());\n      }\n      // 取得対象の順位\n      if (parsed.rank && parsed.rank.match(/^[\\d|,]+$/)) {\n        temp = parsed.rank.split(',');\n        rank = temp.map((i: string) => Number(i));\n\n        localStorage.setItem('rank', parsed.rank.toString());\n      }\n      // 前回からの差分\n      if (parsed.diff && parsed.diff.match(/^[\\d|,]+$/)) {\n        temp = parsed.diff.split(',');\n        diff = temp.map((i: string) => Number(i));\n\n        localStorage.setItem('diff', parsed.diff.toString());\n      }\n    }\n\n    // LocalStorageからロード\n    if (!idol) {\n      const result = localStorage.getItem('idol');\n      if (result) {\n        idol = parseInt(result);\n      } else {\n        idol = 35; // ひなた\n      }\n    }\n    if (!event) {\n      const result = localStorage.getItem('event');\n      if (result) {\n        event = parseInt(result);\n      } else {\n        event = 192; // 4周年\n      }\n    }\n    if (rank.length === 0) {\n      const result = localStorage.getItem('rank');\n      if (result) {\n        const temp = result.split(',');\n        rank = temp.map((i: string) => Number(i));\n      } else {\n        rank = [1, 10, 50, 80, 100, 200];\n      }\n    }\n    if (diff.length === 0) {\n      const result = localStorage.getItem('diff');\n      if (result) {\n        const temp = result.split(',');\n        diff = temp.map((i: string) => Number(i));\n      } else {\n        diff = [1, 6, 24];\n      }\n    }\n\n    setIdolId(idol);\n    setEventId(event);\n    setRankList(rank);\n    setDiffList(diff);\n\n    // イベントタイトル取得\n    fetchEventInfo(event).then(info => {\n      setEventTitle(info.name);\n      setEventType(info.type);\n\n      // イベント取得\n      const result = fetchEventList(info.type, event, rank, idol);\n      result.then(data => {\n        if (data.length > 0) {\n          setList(data);\n          const summary = data[data.length - 1].data[data[data.length - 1].data.length - 1].summaryTime;\n          setLatestTime(summary);\n        }\n      });\n    });\n  }, []);\n\n  // 定期取得\n  useInterval(() => {\n    console.log(new Date());\n    const result = fetchEventList(eventType, eventId, rankList, idolId);\n    result.then(data => {\n      setList(data);\n      const summary = data[data.length - 1].data[data[data.length - 1].data.length - 1].summaryTime;\n      setLatestTime(summary);\n    });\n    // 5分ごと\n  }, 5 * 60 * 1000);\n\n  return (\n    <div className=\"App\">\n      <div className={'SW-update-dialog'} />\n      {/* ヘッダ */}\n      <div className=\"header\">\n        <div className=\"eventName\">{eventTitle}</div>\n        <div className=\"subHeader\">\n          <div className=\"idolName\">{eventType === 5 && idolList[idolId - 1]}</div>\n          <div className=\"updateTime\">update: {latestTime}</div>\n        </div>\n      </div>\n\n      {/* データ */}\n      <div className=\"rank\">\n        {/* 順位 */}\n        <div className=\"rankValue\"></div>\n        {/* 最新のボーダー */}\n        <div className=\"borderValue\"></div>\n        {/* 差分 */}\n        <div className=\"borderDiff\">\n          {diffList.map(diff => (\n            <div className=\"borderDiffValue\">{diff}h</div>\n          ))}\n        </div>\n      </div>\n\n      {list.map(rankData => {\n        // 最新のボーダー\n        const latestScore = rankData.data[rankData.data.length - 1].score;\n        const latestTime = new Date(rankData.data[rankData.data.length - 1].summaryTime).getTime();\n\n        // N時間前\n        const agoList = diffList;\n        const agoData = [];\n        for (const agoHour of agoList) {\n          // 1時間前算出\n          const hourAgo = latestTime - 1000 * 60 * 60 * agoHour;\n          const hourAgoData = rankData.data.filter(data => {\n            return new Date(data.summaryTime).getTime() === hourAgo;\n          });\n          const hourAgoDiff = hourAgoData.length > 0 ? `+${latestScore - hourAgoData[0].score} pts` : '-';\n          agoData.push(hourAgoDiff);\n        }\n\n        return (\n          <div className=\"rank\">\n            {/* 順位 */}\n            <div className=\"rankValue\">{rankData.rank} 位</div>\n            {/* 最新のボーダー */}\n            <div className=\"borderValue\">{latestScore} pts</div>\n            {/* 差分 */}\n            <div className=\"borderDiff\">\n              {agoData.map(data => (\n                <div className=\"borderDiffValue\">{`${data}`}</div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL ? process.env.PUBLIC_URL : '', window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `./service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      // アップデートがある時、SWを強制的に上書きする。PWAで再インストールを不要にする\r\n      if (registration.waiting && config && config.onUpdate) {\r\n        config.onUpdate(registration);\r\n      }\r\n\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { useState } from 'react';\n\nexport const SWUpdateDialog: React.FC<{ registration: ServiceWorkerRegistration }> = ({ registration }) => {\n  const [show, setShow] = useState(!!registration.waiting);\n  const style: React.CSSProperties = {\n    width: '100%',\n    background: 'linear-gradient(180deg, #fe8ad1 0%, #eaa1cd 20%, #7fd6fd 70%, #a4f1e8 100%)',\n  };\n  const handleUpdate = () => {\n    registration.waiting?.postMessage({ type: 'SKIP_WAITING' });\n    setShow(false);\n    window.location.reload();\n  };\n\n  return show ? (\n    <div style={style}>\n      <span>更新があります🎉</span>\n      <button onClick={handleUpdate}>アップデート</button>\n    </div>\n  ) : (\n    <></>\n  );\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { SWUpdateDialog } from './SWUpdateDialog';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register({\r\n  onSuccess: registration => {\r\n    console.log(`'ServiceWorker registration successful with scope: ${registration.scope}`);\r\n  },\r\n  onUpdate: registration => {\r\n    if (registration.waiting) {\r\n      ReactDOM.render(<SWUpdateDialog registration={registration} />, document.querySelector('.SW-update-dialog'));\r\n    }\r\n  },\r\n});\r\n"],"sourceRoot":""}