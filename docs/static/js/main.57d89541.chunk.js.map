{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchJson","url","a","async","fetch","result","json","fetchEventList","eventId","idolId","rankList","join","map","rank","data","score","summaryTime","date","Date","format","replace","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","getMilliseconds","App","React","useState","list","setList","setIdolId","setEventId","setRankList","latestTime","setLatestTime","useEffect","idol","event","window","location","search","parsed","queryString","parse","match","Number","split","then","length","summary","useInterval","className","rankData","latestScore","getTime","agoData","agoHour","hourAgo","hourAgoData","filter","hourAgoDiff","NaN","isNaN","push","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.57d89541.chunk.js","sourcesContent":["import React from 'react';\nimport queryString from 'query-string';\nimport useInterval from 'use-interval';\nimport './App.css';\n\nconst API_BASE = 'https://api.matsurihi.me/mltd/v1/';\n\ntype MatsuriEventRankingIdolPointList = MatsuriEventRankingIdolPoint[];\n\ntype MatsuriEventRankingIdolPoint = {\n  rank: number;\n  data: {\n    score: number;\n    summaryTime: string;\n  }[];\n};\n\nasync function fetchJson<T>(url: string): Promise<T> {\n  const result = await fetch(url);\n  const json = await result.json();\n  return json as T;\n}\n\nconst formatDate = (date: Date, format: string): string => {\n  format = format.replace(/yyyy/g, `${date.getFullYear()}`);\n  format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));\n  format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));\n  format = format.replace(/HH/g, ('0' + date.getHours()).slice(-2));\n  format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));\n  format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));\n  format = format.replace(/SSS/g, ('00' + date.getMilliseconds()).slice(-3));\n  return format;\n};\n\nconst fetchEventList = async (eventId: number, idolId: number, rankList: number[]): Promise<MatsuriEventRankingIdolPointList> => {\n  const url = `${API_BASE}events/${eventId}/rankings/logs/idolPoint/${idolId}/${rankList.join(',')}`;\n  let result = await fetchJson<MatsuriEventRankingIdolPointList>(url);\n  result = result.map(rank => {\n    return {\n      rank: rank.rank,\n      data: rank.data.map(data => {\n        return {\n          score: data.score,\n          summaryTime: formatDate(new Date(data.summaryTime), 'yyyy/MM/dd HH:mm'),\n        };\n      }),\n    };\n  });\n  return result;\n};\n\nconst App: React.SFC = () => {\n  const [list, setList] = React.useState<MatsuriEventRankingIdolPointList>([]);\n  const [idolId, setIdolId] = React.useState<number>(0);\n  const [eventId, setEventId] = React.useState<number>(0);\n  const [rankList, setRankList] = React.useState<number[]>([]);\n  const [latestTime, setLatestTime] = React.useState<string>();\n\n  React.useEffect(() => {\n    // クエリ情報を取得\n    let idol = 35;\n    let event = 142;\n    let rank = [1, 10, 50, 80, 100];\n    if (window.location.search) {\n      const parsed = queryString.parse(window.location.search) as {\n        idol: string;\n        event: string;\n        rank: string;\n      };\n      // アイドルID\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let temp: any;\n      if (parsed.idol && parsed.idol.match(/^\\d+$/)) {\n        idol = Number(parsed.idol);\n      }\n      // イベントID\n      if (parsed.event && parsed.event.match(/^\\d+$/)) {\n        event = Number(parsed.event);\n      }\n      // 取得対象の順位\n      if (parsed.rank && parsed.rank.match(/^[\\d|,]+$/)) {\n        temp = parsed.rank.split(',');\n        rank = temp;\n      }\n    }\n    setIdolId(idol);\n    setEventId(event);\n    setRankList(rank);\n\n    // イベント取得\n    const result = fetchEventList(event, idol, rank);\n    result.then(data => {\n      if (data.length > 0) {\n        setList(data);\n        const summary = data[data.length - 1].data[data[data.length - 1].data.length - 1].summaryTime;\n        setLatestTime(summary);\n      }\n    });\n  }, []);\n\n  // 定期取得\n  useInterval(() => {\n    const result = fetchEventList(eventId, idolId, rankList);\n    result.then(data => {\n      setList(data);\n    });\n    // 10分ごと\n  }, 10 * 60 * 1000);\n\n  return (\n    <div className=\"App\">\n      {/* ヘッダ */}\n      <div className=\"header\">\n        <div className=\"updateTime\">update: {latestTime}</div>\n      </div>\n\n      {/* データ */}\n      <div className=\"rank\">\n        {/* 順位 */}\n        <div className=\"rankValue\"></div>\n        {/* 最新のボーダー */}\n        <div className=\"borderValue\"></div>\n        {/* 差分 */}\n        <div className=\"borderDiff\">\n          <div className=\"borderDiffValue\">1h</div>\n          <div className=\"borderDiffValue\">6h</div>\n          <div className=\"borderDiffValue\">12h</div>\n        </div>\n      </div>\n\n      {list.map(rankData => {\n        // 最新のボーダー\n        const latestScore = rankData.data[rankData.data.length - 1].score;\n        const latestTime = new Date(rankData.data[rankData.data.length - 1].summaryTime).getTime();\n\n        // N時間前\n        const agoList = [1, 6, 12];\n        const agoData = [];\n        for (const agoHour of agoList) {\n          // 1時間前算出\n          const hourAgo = latestTime - 1000 * 60 * 60 * agoHour;\n          const hourAgoData = rankData.data.filter(data => {\n            return new Date(data.summaryTime).getTime() === hourAgo;\n          });\n          const hourAgoDiff = hourAgoData ? latestScore - hourAgoData[0].score : NaN;\n          if (!Number.isNaN(hourAgoDiff)) agoData.push(hourAgoDiff);\n        }\n\n        return (\n          <div className=\"rank\">\n            {/* 順位 */}\n            <div className=\"rankValue\">{rankData.rank} 位</div>\n            {/* 最新のボーダー */}\n            <div className=\"borderValue\">{latestScore} pts</div>\n            {/* 差分 */}\n            <div className=\"borderDiff\">\n              {agoData.map(data => (\n                <div className=\"borderDiffValue\">{`+${data} pts`}</div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}